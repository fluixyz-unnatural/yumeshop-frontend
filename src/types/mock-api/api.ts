/* tslint:disable */
/* eslint-disable */
/**
 * yumeshop
 * yumeshopのAPIが定義されています。
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * id
     * @type {string}
     * @memberof Campaign
     */
    'id': string;
    /**
     * キャンペーンの名前
     * @type {string}
     * @memberof Campaign
     */
    'name': string;
    /**
     * キャンペーンのサムネイル画像のURL
     * @type {string}
     * @memberof Campaign
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface CampaignPostParams
 */
export interface CampaignPostParams {
    /**
     * カテゴリの名前
     * @type {string}
     * @memberof CampaignPostParams
     */
    'name': string;
    /**
     * カテゴリのサムネイル画像のURL
     * @type {string}
     * @memberof CampaignPostParams
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface CampaignPutParams
 */
export interface CampaignPutParams {
    /**
     * カテゴリの名前
     * @type {string}
     * @memberof CampaignPutParams
     */
    'name'?: string;
    /**
     * カテゴリのサムネイル画像のURL
     * @type {string}
     * @memberof CampaignPutParams
     */
    'thumbnail'?: string;
}
/**
 * カテゴリのmodel
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * id
     * @type {string}
     * @memberof Category
     */
    'id': string;
    /**
     * カテゴリの名前
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * カテゴリのサムネイル画像のURL
     * @type {string}
     * @memberof Category
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface CategoryPostParams
 */
export interface CategoryPostParams {
    /**
     * カテゴリの名前
     * @type {string}
     * @memberof CategoryPostParams
     */
    'name': string;
    /**
     * カテゴリのサムネイル画像のURL
     * @type {string}
     * @memberof CategoryPostParams
     */
    'thumbnail': string;
}
/**
 * 
 * @export
 * @interface CategoryPutParams
 */
export interface CategoryPutParams {
    /**
     * カテゴリの名前
     * @type {string}
     * @memberof CategoryPutParams
     */
    'name'?: string;
    /**
     * カテゴリのサムネイル画像のURL
     * @type {string}
     * @memberof CategoryPutParams
     */
    'thumbnail'?: string;
}
/**
 * 
 * @export
 * @interface DetailContent
 */
export interface DetailContent {
    /**
     * ヘッダー
     * @type {string}
     * @memberof DetailContent
     */
    'header': string;
    /**
     * 内容
     * @type {string}
     * @memberof DetailContent
     */
    'content': string;
}
/**
 * お知らせのmodel
 * @export
 * @interface Information
 */
export interface Information {
    /**
     * 
     * @type {string}
     * @memberof Information
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Information
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Information
     */
    'detail': string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Information
     */
    'tags': Array<Tag>;
    /**
     * 
     * @type {string}
     * @memberof Information
     */
    'announced_at': string;
}
/**
 * 
 * @export
 * @interface InformationPostParams
 */
export interface InformationPostParams {
    /**
     * お知らせのタイトル
     * @type {string}
     * @memberof InformationPostParams
     */
    'title': string;
    /**
     * お知らせの詳細
     * @type {string}
     * @memberof InformationPostParams
     */
    'detail': string;
    /**
     * お知らせのタグ
     * @type {Array<string>}
     * @memberof InformationPostParams
     */
    'tags': Array<string>;
    /**
     * お知らせのアナウンスされた日時
     * @type {string}
     * @memberof InformationPostParams
     */
    'announced_at': string;
}
/**
 * 
 * @export
 * @interface InformationPutParams
 */
export interface InformationPutParams {
    /**
     * お知らせのタイトル
     * @type {string}
     * @memberof InformationPutParams
     */
    'title'?: string;
    /**
     * お知らせの詳細
     * @type {string}
     * @memberof InformationPutParams
     */
    'detail'?: string;
    /**
     * お知らせのタグ
     * @type {Array<string>}
     * @memberof InformationPutParams
     */
    'tags'?: Array<string>;
    /**
     * お知らせのアナウンスされた日時
     * @type {string}
     * @memberof InformationPutParams
     */
    'announced_at'?: string;
}
/**
 * 値段の情報のmodel
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * 割引後の販売価格
     * @type {number}
     * @memberof Price
     */
    'selling_price': number;
    /**
     * 元の値段
     * @type {number}
     * @memberof Price
     */
    'original_price': number;
    /**
     * 割引が適応されているか
     * @type {boolean}
     * @memberof Price
     */
    'discounted': boolean;
    /**
     * 割引の総量
     * @type {number}
     * @memberof Price
     */
    'discount_amount': number;
    /**
     * 割引の割合(0-100[%])
     * @type {number}
     * @memberof Price
     */
    'discount_percentage': number;
}
/**
 * 
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * id
     * @type {string}
     * @memberof Promotion
     */
    'id': string;
    /**
     * プロモーションのタイトル
     * @type {string}
     * @memberof Promotion
     */
    'title': string;
    /**
     * プロモーションの画像のURL
     * @type {string}
     * @memberof Promotion
     */
    'image': string;
    /**
     * プロモーションの詳細
     * @type {string}
     * @memberof Promotion
     */
    'detail': string;
    /**
     * プロモーションのリンクのURL
     * @type {string}
     * @memberof Promotion
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface PromotionPostParams
 */
export interface PromotionPostParams {
    /**
     * プロモーションのタイトル
     * @type {string}
     * @memberof PromotionPostParams
     */
    'title': string;
    /**
     * プロモーションの画像のURL
     * @type {string}
     * @memberof PromotionPostParams
     */
    'image': string;
    /**
     * プロモーションの詳細
     * @type {string}
     * @memberof PromotionPostParams
     */
    'detail': string;
    /**
     * プロモーションのリンクのURL
     * @type {string}
     * @memberof PromotionPostParams
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface PromotionPutParams
 */
export interface PromotionPutParams {
    /**
     * プロモーションのタイトル
     * @type {string}
     * @memberof PromotionPutParams
     */
    'title'?: string;
    /**
     * プロモーションの画像のURL
     * @type {string}
     * @memberof PromotionPutParams
     */
    'image'?: string;
    /**
     * プロモーションの詳細
     * @type {string}
     * @memberof PromotionPutParams
     */
    'detail'?: string;
    /**
     * プロモーションのリンクのURL
     * @type {string}
     * @memberof PromotionPutParams
     */
    'link'?: string;
}
/**
 * ショップアイテムのmodel
 * @export
 * @interface ShopItem
 */
export interface ShopItem {
    /**
     * id
     * @type {string}
     * @memberof ShopItem
     */
    'id': string;
    /**
     * 商品の名前
     * @type {string}
     * @memberof ShopItem
     */
    'name': string;
    /**
     * 商品のサムネイル画像のURL
     * @type {string}
     * @memberof ShopItem
     */
    'thumbnail': string;
    /**
     * 
     * @type {Price}
     * @memberof ShopItem
     */
    'price': Price;
    /**
     * タグの配列
     * @type {Array<Tag>}
     * @memberof ShopItem
     */
    'tags': Array<Tag>;
    /**
     * カテゴリの配列
     * @type {Array<Category>}
     * @memberof ShopItem
     */
    'categories': Array<Category>;
    /**
     * キャンペーンの配列
     * @type {Array<Campaign>}
     * @memberof ShopItem
     */
    'campaigns': Array<Campaign>;
}
/**
 * 商品の詳細情報のmodel
 * @export
 * @interface ShopItemDetail
 */
export interface ShopItemDetail {
    /**
     * id
     * @type {string}
     * @memberof ShopItemDetail
     */
    'id': string;
    /**
     * 商品の名前
     * @type {string}
     * @memberof ShopItemDetail
     */
    'name': string;
    /**
     * サムネイル画像のURL
     * @type {string}
     * @memberof ShopItemDetail
     */
    'thumbnail': string;
    /**
     * 
     * @type {Price}
     * @memberof ShopItemDetail
     */
    'price': Price;
    /**
     * タグの配列
     * @type {Array<Tag>}
     * @memberof ShopItemDetail
     */
    'tags': Array<Tag>;
    /**
     * カテゴリのの配列
     * @type {Array<Category>}
     * @memberof ShopItemDetail
     */
    'categories': Array<Category>;
    /**
     * キャンペーンの配列
     * @type {Array<Campaign>}
     * @memberof ShopItemDetail
     */
    'campaigns': Array<Campaign>;
    /**
     * 商品の詳細
     * @type {Array<DetailContent>}
     * @memberof ShopItemDetail
     */
    'details': Array<DetailContent>;
    /**
     * 画像のURLの配列
     * @type {Array<string>}
     * @memberof ShopItemDetail
     */
    'images': Array<string>;
    /**
     * 関連商品の配列
     * @type {Array<ShopItem>}
     * @memberof ShopItemDetail
     */
    'related_shop_items': Array<ShopItem>;
}
/**
 * 
 * @export
 * @interface ShopItemPostParams
 */
export interface ShopItemPostParams {
    /**
     * 商品の名前
     * @type {string}
     * @memberof ShopItemPostParams
     */
    'name': string;
    /**
     * 商品のサムネイル画像のURL
     * @type {string}
     * @memberof ShopItemPostParams
     */
    'thumbnail': string;
    /**
     * 販売価格
     * @type {number}
     * @memberof ShopItemPostParams
     */
    'selling_price': number;
    /**
     * 元の値段
     * @type {number}
     * @memberof ShopItemPostParams
     */
    'original_price': number;
    /**
     * タグのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPostParams
     */
    'tags': Array<string>;
    /**
     * カテゴリのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPostParams
     */
    'categories': Array<string>;
    /**
     * キャンペーンのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPostParams
     */
    'campaigns': Array<string>;
    /**
     * 商品の詳細
     * @type {Array<DetailContent>}
     * @memberof ShopItemPostParams
     */
    'details': Array<DetailContent>;
    /**
     * 画像URLの配列
     * @type {Array<string>}
     * @memberof ShopItemPostParams
     */
    'images': Array<string>;
    /**
     * 関連商品のidの配列
     * @type {Array<string>}
     * @memberof ShopItemPostParams
     */
    'related_shop_items': Array<string>;
}
/**
 * 
 * @export
 * @interface ShopItemPutParams
 */
export interface ShopItemPutParams {
    /**
     * 商品の名前
     * @type {string}
     * @memberof ShopItemPutParams
     */
    'name'?: string;
    /**
     * 商品のサムネイル画像のURL
     * @type {string}
     * @memberof ShopItemPutParams
     */
    'thumbnail'?: string;
    /**
     * 販売価格
     * @type {number}
     * @memberof ShopItemPutParams
     */
    'selling_price'?: number;
    /**
     * 元の値段
     * @type {number}
     * @memberof ShopItemPutParams
     */
    'original_price'?: number;
    /**
     * タグのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPutParams
     */
    'tags'?: Array<string>;
    /**
     * カテゴリのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPutParams
     */
    'categories'?: Array<string>;
    /**
     * キャンペーンのidの配列
     * @type {Array<string>}
     * @memberof ShopItemPutParams
     */
    'campaigns'?: Array<string>;
    /**
     * 商品の詳細
     * @type {Array<DetailContent>}
     * @memberof ShopItemPutParams
     */
    'details'?: Array<DetailContent>;
    /**
     * 画像URLの配列
     * @type {Array<string>}
     * @memberof ShopItemPutParams
     */
    'images'?: Array<string>;
    /**
     * 関連商品のidの配列
     * @type {Array<string>}
     * @memberof ShopItemPutParams
     */
    'related_shop_items'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * id
     * @type {string}
     * @memberof Tag
     */
    'id': string;
    /**
     * タグの名称
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * html5でcolorとして扱える文字列
     * @type {string}
     * @memberof Tag
     */
    'color': string;
    /**
     * 
     * @type {TagGroup}
     * @memberof Tag
     */
    'tag_group': TagGroup;
}
/**
 * タグのグループを表すenum shop_item: 商品のタググループ information: お知らせのタググループ
 * @export
 * @enum {string}
 */

export const TagGroup = {
    ShopItem: 'shop_item',
    Information: 'information'
} as const;

export type TagGroup = typeof TagGroup[keyof typeof TagGroup];


/**
 * 
 * @export
 * @interface TagPostParams
 */
export interface TagPostParams {
    /**
     * タグの名前
     * @type {string}
     * @memberof TagPostParams
     */
    'name': string;
    /**
     * タグの色
     * @type {string}
     * @memberof TagPostParams
     */
    'color': string;
    /**
     * 
     * @type {TagGroup}
     * @memberof TagPostParams
     */
    'tag_group': TagGroup;
}
/**
 * 
 * @export
 * @interface TagPutParams
 */
export interface TagPutParams {
    /**
     * タグの名前
     * @type {string}
     * @memberof TagPutParams
     */
    'name'?: string;
    /**
     * タグの色
     * @type {string}
     * @memberof TagPutParams
     */
    'color'?: string;
}

/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * キャンペーンを削除する
         * @summary Delete Campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCampaignsId', 'id', id)
            const localVarPath = `/campaigns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * キャンペーンのリストを取得する
         * @summary Get Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * キャンペーンを追加する
         * @summary Create Campaign
         * @param {CampaignPostParams} [campaignPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCampaigns: async (campaignPostParams?: CampaignPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * キャンペーンを更新する
         * @summary Update Campaign
         * @param {string} id 
         * @param {CampaignPutParams} [campaignPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCampaignsId: async (id: string, campaignPutParams?: CampaignPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCampaignsId', 'id', id)
            const localVarPath = `/campaigns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * キャンペーンを削除する
         * @summary Delete Campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaignsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaignsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * キャンペーンのリストを取得する
         * @summary Get Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaigns(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaigns(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * キャンペーンを追加する
         * @summary Create Campaign
         * @param {CampaignPostParams} [campaignPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCampaigns(campaignPostParams?: CampaignPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCampaigns(campaignPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * キャンペーンを更新する
         * @summary Update Campaign
         * @param {string} id 
         * @param {CampaignPutParams} [campaignPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCampaignsId(id: string, campaignPutParams?: CampaignPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCampaignsId(id, campaignPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * キャンペーンを削除する
         * @summary Delete Campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCampaignsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * キャンペーンのリストを取得する
         * @summary Get Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaigns(options?: any): AxiosPromise<Array<Campaign>> {
            return localVarFp.getCampaigns(options).then((request) => request(axios, basePath));
        },
        /**
         * キャンペーンを追加する
         * @summary Create Campaign
         * @param {CampaignPostParams} [campaignPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCampaigns(campaignPostParams?: CampaignPostParams, options?: any): AxiosPromise<Campaign> {
            return localVarFp.postCampaigns(campaignPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * キャンペーンを更新する
         * @summary Update Campaign
         * @param {string} id 
         * @param {CampaignPutParams} [campaignPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCampaignsId(id: string, campaignPutParams?: CampaignPutParams, options?: any): AxiosPromise<Campaign> {
            return localVarFp.putCampaignsId(id, campaignPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * キャンペーンを削除する
     * @summary Delete Campaign
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public deleteCampaignsId(id: string, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).deleteCampaignsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * キャンペーンのリストを取得する
     * @summary Get Campaigns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaigns(options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaigns(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * キャンペーンを追加する
     * @summary Create Campaign
     * @param {CampaignPostParams} [campaignPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public postCampaigns(campaignPostParams?: CampaignPostParams, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).postCampaigns(campaignPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * キャンペーンを更新する
     * @summary Update Campaign
     * @param {string} id 
     * @param {CampaignPutParams} [campaignPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public putCampaignsId(id: string, campaignPutParams?: CampaignPutParams, options?: AxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).putCampaignsId(id, campaignPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * カテゴリを削除する
         * @summary Delete Category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * カテゴリのリストを取得
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * カテゴリを追加する
         * @summary Create Category
         * @param {CategoryPostParams} [categoryPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories: async (categoryPostParams?: CategoryPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * カテゴリを更新する
         * @summary Update Category
         * @param {string} id 
         * @param {CategoryPutParams} [categoryPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId: async (id: string, categoryPutParams?: CategoryPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * カテゴリを削除する
         * @summary Delete Category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoriesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * カテゴリのリストを取得
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * カテゴリを追加する
         * @summary Create Category
         * @param {CategoryPostParams} [categoryPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategories(categoryPostParams?: CategoryPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategories(categoryPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * カテゴリを更新する
         * @summary Update Category
         * @param {string} id 
         * @param {CategoryPutParams} [categoryPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesId(id: string, categoryPutParams?: CategoryPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategoriesId(id, categoryPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * カテゴリを削除する
         * @summary Delete Category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCategoriesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * カテゴリのリストを取得
         * @summary Get Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.getCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * カテゴリを追加する
         * @summary Create Category
         * @param {CategoryPostParams} [categoryPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories(categoryPostParams?: CategoryPostParams, options?: any): AxiosPromise<Category> {
            return localVarFp.postCategories(categoryPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * カテゴリを更新する
         * @summary Update Category
         * @param {string} id 
         * @param {CategoryPutParams} [categoryPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId(id: string, categoryPutParams?: CategoryPutParams, options?: any): AxiosPromise<Category> {
            return localVarFp.putCategoriesId(id, categoryPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * カテゴリを削除する
     * @summary Delete Category
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public deleteCategoriesId(id: string, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).deleteCategoriesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * カテゴリのリストを取得
     * @summary Get Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategory(options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * カテゴリを追加する
     * @summary Create Category
     * @param {CategoryPostParams} [categoryPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public postCategories(categoryPostParams?: CategoryPostParams, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).postCategories(categoryPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * カテゴリを更新する
     * @summary Update Category
     * @param {string} id 
     * @param {CategoryPutParams} [categoryPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public putCategoriesId(id: string, categoryPutParams?: CategoryPutParams, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).putCategoriesId(id, categoryPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InformationsApi - axios parameter creator
 * @export
 */
export const InformationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * お知らせを削除する
         * @summary Delete Information
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInformationsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInformationsId', 'id', id)
            const localVarPath = `/informations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お知らせのリストを取得する
         * @summary Get Informations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/informations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お知らせを追加する
         * @summary Create Information
         * @param {InformationPostParams} [informationPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInformations: async (informationPostParams?: InformationPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/informations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(informationPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お知らせを更新する
         * @summary Update Information
         * @param {string} id 
         * @param {InformationPutParams} [informationPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putInformationsId: async (id: string, informationPutParams?: InformationPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putInformationsId', 'id', id)
            const localVarPath = `/informations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(informationPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InformationsApi - functional programming interface
 * @export
 */
export const InformationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InformationsApiAxiosParamCreator(configuration)
    return {
        /**
         * お知らせを削除する
         * @summary Delete Information
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInformationsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInformationsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * お知らせのリストを取得する
         * @summary Get Informations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Information>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * お知らせを追加する
         * @summary Create Information
         * @param {InformationPostParams} [informationPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postInformations(informationPostParams?: InformationPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Information>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInformations(informationPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * お知らせを更新する
         * @summary Update Information
         * @param {string} id 
         * @param {InformationPutParams} [informationPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putInformationsId(id: string, informationPutParams?: InformationPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Information>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putInformationsId(id, informationPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InformationsApi - factory interface
 * @export
 */
export const InformationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InformationsApiFp(configuration)
    return {
        /**
         * お知らせを削除する
         * @summary Delete Information
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInformationsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInformationsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * お知らせのリストを取得する
         * @summary Get Informations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(options?: any): AxiosPromise<Array<Information>> {
            return localVarFp.getInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * お知らせを追加する
         * @summary Create Information
         * @param {InformationPostParams} [informationPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInformations(informationPostParams?: InformationPostParams, options?: any): AxiosPromise<Information> {
            return localVarFp.postInformations(informationPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * お知らせを更新する
         * @summary Update Information
         * @param {string} id 
         * @param {InformationPutParams} [informationPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putInformationsId(id: string, informationPutParams?: InformationPutParams, options?: any): AxiosPromise<Information> {
            return localVarFp.putInformationsId(id, informationPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InformationsApi - object-oriented interface
 * @export
 * @class InformationsApi
 * @extends {BaseAPI}
 */
export class InformationsApi extends BaseAPI {
    /**
     * お知らせを削除する
     * @summary Delete Information
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationsApi
     */
    public deleteInformationsId(id: string, options?: AxiosRequestConfig) {
        return InformationsApiFp(this.configuration).deleteInformationsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お知らせのリストを取得する
     * @summary Get Informations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationsApi
     */
    public getInformation(options?: AxiosRequestConfig) {
        return InformationsApiFp(this.configuration).getInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お知らせを追加する
     * @summary Create Information
     * @param {InformationPostParams} [informationPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationsApi
     */
    public postInformations(informationPostParams?: InformationPostParams, options?: AxiosRequestConfig) {
        return InformationsApiFp(this.configuration).postInformations(informationPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お知らせを更新する
     * @summary Update Information
     * @param {string} id 
     * @param {InformationPutParams} [informationPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationsApi
     */
    public putInformationsId(id: string, informationPutParams?: InformationPutParams, options?: AxiosRequestConfig) {
        return InformationsApiFp(this.configuration).putInformationsId(id, informationPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PromotionsApi - axios parameter creator
 * @export
 */
export const PromotionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロモーションを削除する
         * @summary Delete Promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromotionsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePromotionsId', 'id', id)
            const localVarPath = `/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロモーションのリストを取得する
         * @summary Get Promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロモーションを追加する
         * @summary Create Promotion
         * @param {PromotionPostParams} [promotionPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPromotions: async (promotionPostParams?: PromotionPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロモーションを更新する
         * @summary Update Promotion
         * @param {string} id 
         * @param {PromotionPutParams} [promotionPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPromotionsId: async (id: string, promotionPutParams?: PromotionPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPromotionsId', 'id', id)
            const localVarPath = `/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionsApi - functional programming interface
 * @export
 */
export const PromotionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロモーションを削除する
         * @summary Delete Promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePromotionsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePromotionsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロモーションのリストを取得する
         * @summary Get Promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromotions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Promotion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromotions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロモーションを追加する
         * @summary Create Promotion
         * @param {PromotionPostParams} [promotionPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPromotions(promotionPostParams?: PromotionPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Promotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPromotions(promotionPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロモーションを更新する
         * @summary Update Promotion
         * @param {string} id 
         * @param {PromotionPutParams} [promotionPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPromotionsId(id: string, promotionPutParams?: PromotionPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Promotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPromotionsId(id, promotionPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionsApi - factory interface
 * @export
 */
export const PromotionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionsApiFp(configuration)
    return {
        /**
         * プロモーションを削除する
         * @summary Delete Promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromotionsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePromotionsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロモーションのリストを取得する
         * @summary Get Promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromotions(options?: any): AxiosPromise<Array<Promotion>> {
            return localVarFp.getPromotions(options).then((request) => request(axios, basePath));
        },
        /**
         * プロモーションを追加する
         * @summary Create Promotion
         * @param {PromotionPostParams} [promotionPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPromotions(promotionPostParams?: PromotionPostParams, options?: any): AxiosPromise<Promotion> {
            return localVarFp.postPromotions(promotionPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * プロモーションを更新する
         * @summary Update Promotion
         * @param {string} id 
         * @param {PromotionPutParams} [promotionPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPromotionsId(id: string, promotionPutParams?: PromotionPutParams, options?: any): AxiosPromise<Promotion> {
            return localVarFp.putPromotionsId(id, promotionPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionsApi - object-oriented interface
 * @export
 * @class PromotionsApi
 * @extends {BaseAPI}
 */
export class PromotionsApi extends BaseAPI {
    /**
     * プロモーションを削除する
     * @summary Delete Promotion
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    public deletePromotionsId(id: string, options?: AxiosRequestConfig) {
        return PromotionsApiFp(this.configuration).deletePromotionsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロモーションのリストを取得する
     * @summary Get Promotions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    public getPromotions(options?: AxiosRequestConfig) {
        return PromotionsApiFp(this.configuration).getPromotions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロモーションを追加する
     * @summary Create Promotion
     * @param {PromotionPostParams} [promotionPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    public postPromotions(promotionPostParams?: PromotionPostParams, options?: AxiosRequestConfig) {
        return PromotionsApiFp(this.configuration).postPromotions(promotionPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロモーションを更新する
     * @summary Update Promotion
     * @param {string} id 
     * @param {PromotionPutParams} [promotionPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    public putPromotionsId(id: string, promotionPutParams?: PromotionPutParams, options?: AxiosRequestConfig) {
        return PromotionsApiFp(this.configuration).putPromotionsId(id, promotionPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShopItemsApi - axios parameter creator
 * @export
 */
export const ShopItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ショップアイテムを削除する
         * @summary Delete Shop Item
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShopItemId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteShopItemId', 'id', id)
            const localVarPath = `/shop_items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ショップアイテム1件分の詳細を取得する
         * @summary Get Shop Item Detail
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShopItem', 'id', id)
            const localVarPath = `/shop_items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ショップアイテムのリストを取得する
         * @summary Get shop items
         * @param {string} [categoryId] カテゴリIDによる絞り込み
         * @param {string} [campaignId] キャンペーンIDによる絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopItems: async (categoryId?: string, campaignId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop_items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = campaignId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ショップアイテムを追加する
         * @summary Create Shop Item
         * @param {ShopItemPostParams} [shopItemPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShopItems: async (shopItemPostParams?: ShopItemPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop_items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shopItemPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ショップアイテムを更新する
         * @summary Update Shop Item
         * @param {string} id ShopItemのID
         * @param {ShopItemPutParams} [shopItemPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShopItemId: async (id: string, shopItemPutParams?: ShopItemPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putShopItemId', 'id', id)
            const localVarPath = `/shop_items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shopItemPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopItemsApi - functional programming interface
 * @export
 */
export const ShopItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * ショップアイテムを削除する
         * @summary Delete Shop Item
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShopItemId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShopItemId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ショップアイテム1件分の詳細を取得する
         * @summary Get Shop Item Detail
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShopItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopItemDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShopItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ショップアイテムのリストを取得する
         * @summary Get shop items
         * @param {string} [categoryId] カテゴリIDによる絞り込み
         * @param {string} [campaignId] キャンペーンIDによる絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShopItems(categoryId?: string, campaignId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShopItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShopItems(categoryId, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ショップアイテムを追加する
         * @summary Create Shop Item
         * @param {ShopItemPostParams} [shopItemPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShopItems(shopItemPostParams?: ShopItemPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopItemDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postShopItems(shopItemPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ショップアイテムを更新する
         * @summary Update Shop Item
         * @param {string} id ShopItemのID
         * @param {ShopItemPutParams} [shopItemPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShopItemId(id: string, shopItemPutParams?: ShopItemPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopItemDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShopItemId(id, shopItemPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopItemsApi - factory interface
 * @export
 */
export const ShopItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopItemsApiFp(configuration)
    return {
        /**
         * ショップアイテムを削除する
         * @summary Delete Shop Item
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShopItemId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteShopItemId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ショップアイテム1件分の詳細を取得する
         * @summary Get Shop Item Detail
         * @param {string} id ShopItemのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopItem(id: string, options?: any): AxiosPromise<ShopItemDetail> {
            return localVarFp.getShopItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ショップアイテムのリストを取得する
         * @summary Get shop items
         * @param {string} [categoryId] カテゴリIDによる絞り込み
         * @param {string} [campaignId] キャンペーンIDによる絞り込み
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShopItems(categoryId?: string, campaignId?: string, options?: any): AxiosPromise<Array<ShopItem>> {
            return localVarFp.getShopItems(categoryId, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * ショップアイテムを追加する
         * @summary Create Shop Item
         * @param {ShopItemPostParams} [shopItemPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShopItems(shopItemPostParams?: ShopItemPostParams, options?: any): AxiosPromise<ShopItemDetail> {
            return localVarFp.postShopItems(shopItemPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * ショップアイテムを更新する
         * @summary Update Shop Item
         * @param {string} id ShopItemのID
         * @param {ShopItemPutParams} [shopItemPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShopItemId(id: string, shopItemPutParams?: ShopItemPutParams, options?: any): AxiosPromise<ShopItemDetail> {
            return localVarFp.putShopItemId(id, shopItemPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopItemsApi - object-oriented interface
 * @export
 * @class ShopItemsApi
 * @extends {BaseAPI}
 */
export class ShopItemsApi extends BaseAPI {
    /**
     * ショップアイテムを削除する
     * @summary Delete Shop Item
     * @param {string} id ShopItemのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopItemsApi
     */
    public deleteShopItemId(id: string, options?: AxiosRequestConfig) {
        return ShopItemsApiFp(this.configuration).deleteShopItemId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ショップアイテム1件分の詳細を取得する
     * @summary Get Shop Item Detail
     * @param {string} id ShopItemのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopItemsApi
     */
    public getShopItem(id: string, options?: AxiosRequestConfig) {
        return ShopItemsApiFp(this.configuration).getShopItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ショップアイテムのリストを取得する
     * @summary Get shop items
     * @param {string} [categoryId] カテゴリIDによる絞り込み
     * @param {string} [campaignId] キャンペーンIDによる絞り込み
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopItemsApi
     */
    public getShopItems(categoryId?: string, campaignId?: string, options?: AxiosRequestConfig) {
        return ShopItemsApiFp(this.configuration).getShopItems(categoryId, campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ショップアイテムを追加する
     * @summary Create Shop Item
     * @param {ShopItemPostParams} [shopItemPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopItemsApi
     */
    public postShopItems(shopItemPostParams?: ShopItemPostParams, options?: AxiosRequestConfig) {
        return ShopItemsApiFp(this.configuration).postShopItems(shopItemPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ショップアイテムを更新する
     * @summary Update Shop Item
     * @param {string} id ShopItemのID
     * @param {ShopItemPutParams} [shopItemPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopItemsApi
     */
    public putShopItemId(id: string, shopItemPutParams?: ShopItemPutParams, options?: AxiosRequestConfig) {
        return ShopItemsApiFp(this.configuration).putShopItemId(id, shopItemPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タグの削除をする
         * @summary Delete Tag
         * @param {string} id タグのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTagsId', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグのリストを取得する
         * @summary Get Tags
         * @param {Array<TagGroup>} [tagGroup] タググループによる絞り込み(複数指定可)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags: async (tagGroup?: Array<TagGroup>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagGroup) {
                localVarQueryParameter['tag_group'] = tagGroup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグの追加をする
         * @summary Create Tag
         * @param {TagPostParams} [tagPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTags: async (tagPostParams?: TagPostParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagPostParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグの更新をする
         * @summary Update Tag
         * @param {string} id タグのid
         * @param {TagPutParams} [tagPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsId: async (id: string, tagPutParams?: TagPutParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTagsId', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagPutParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * タグの削除をする
         * @summary Delete Tag
         * @param {string} id タグのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグのリストを取得する
         * @summary Get Tags
         * @param {Array<TagGroup>} [tagGroup] タググループによる絞り込み(複数指定可)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTags(tagGroup?: Array<TagGroup>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTags(tagGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグの追加をする
         * @summary Create Tag
         * @param {TagPostParams} [tagPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTags(tagPostParams?: TagPostParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTags(tagPostParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグの更新をする
         * @summary Update Tag
         * @param {string} id タグのid
         * @param {TagPutParams} [tagPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTagsId(id: string, tagPutParams?: TagPutParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTagsId(id, tagPutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * タグの削除をする
         * @summary Delete Tag
         * @param {string} id タグのid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTagsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * タグのリストを取得する
         * @summary Get Tags
         * @param {Array<TagGroup>} [tagGroup] タググループによる絞り込み(複数指定可)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(tagGroup?: Array<TagGroup>, options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.getTags(tagGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * タグの追加をする
         * @summary Create Tag
         * @param {TagPostParams} [tagPostParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTags(tagPostParams?: TagPostParams, options?: any): AxiosPromise<void> {
            return localVarFp.postTags(tagPostParams, options).then((request) => request(axios, basePath));
        },
        /**
         * タグの更新をする
         * @summary Update Tag
         * @param {string} id タグのid
         * @param {TagPutParams} [tagPutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsId(id: string, tagPutParams?: TagPutParams, options?: any): AxiosPromise<Tag> {
            return localVarFp.putTagsId(id, tagPutParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * タグの削除をする
     * @summary Delete Tag
     * @param {string} id タグのid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTagsId(id: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).deleteTagsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグのリストを取得する
     * @summary Get Tags
     * @param {Array<TagGroup>} [tagGroup] タググループによる絞り込み(複数指定可)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTags(tagGroup?: Array<TagGroup>, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTags(tagGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの追加をする
     * @summary Create Tag
     * @param {TagPostParams} [tagPostParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public postTags(tagPostParams?: TagPostParams, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).postTags(tagPostParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの更新をする
     * @summary Update Tag
     * @param {string} id タグのid
     * @param {TagPutParams} [tagPutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public putTagsId(id: string, tagPutParams?: TagPutParams, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).putTagsId(id, tagPutParams, options).then((request) => request(this.axios, this.basePath));
    }
}


